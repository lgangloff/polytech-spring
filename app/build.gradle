/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    
	implementation 'org.springframework.boot:spring-boot-starter-security:3.2.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest:3.2.4'

    annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:6.4.4.Final"
    implementation "org.hibernate:hibernate-envers:6.4.4.Final"
	implementation 'org.springframework.boot:spring-boot-starter-web:3.2.4'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.4'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
	runtimeOnly 'org.postgresql:postgresql:42.7.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.17.0'

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    compileJava.options.compilerArgs.add '-parameters'
    compileTestJava.options.compilerArgs.add '-parameters'
}

application {
    // Define the main class for the application.
    mainClass = 'org.polytech.spring.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
